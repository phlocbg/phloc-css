#summary First steps using phloc-css
#labels Featured

= Introduction =

phloc-css is a Java library for reading and writing CSS 2 and CSS 3 data structures. It has no logic for applying CSS onto HTML elements.
This page shows some basic code examples that can be used to use the library. All snippets are free for any use.

Prerequisites: as *phloc-css depends* on [http://code.google.com/p/phloc-commons phloc-commons], the following examples also do. Additionally [http://www.slf4j.org/ SLF4J] is required.

= Usage with Maven =

To build phloc-css from source, Maven 3.0.4 is required. Any version below does *NOT* work!

To use phloc-css put the following to your pom.xml:
{{{
...
  <repositories>
...
    <repository>
      <id>phloc.com</id>
      <url>http://repo.phloc.com/maven2</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>
...
  <dependencies>
    ...
    <dependency>
      <groupId>com.phloc</groupId>
      <artifactId>phloc-css</artifactId>
      <version>3.5.0</version>
    </dependency>
  </dependencies>
...
}}}

= Reading a CSS 3.0 file =

{{{
import java.io.File;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.phloc.css.ECSSVersion;
import com.phloc.css.decl.CascadingStyleSheet;
import com.phloc.css.reader.CSSReader;

/**
 * This is example code to read a CSS declaration from a {@link File}.
 * 
 * @author philip
 */
public final class WikiReadCSS
{
  private static final Logger s_aLogger = LoggerFactory.getLogger (WikiReadCSS.class);

  /**
   * Read a CSS 3.0 declaration from a file using UTF-8 encoding.
   * 
   * @param aFile
   *        The file to be read. May not be <code>null</code>.
   * @return <code>null</code> if the file has syntax errors.
   */
  public static CascadingStyleSheet readCSS30 (final File aFile)
  {
    final CascadingStyleSheet aCSS = CSSReader.readFromFile (aFile, "utf-8", ECSSVersion.CSS30);
    if (aCSS == null)
    {
      // Most probably a syntax error
      s_aLogger.warn ("Failed to read CSS - please see previous logging entries!");
      return null;
    }
    return aCSS;
  }
}
}}}

= Writing a CSS 3.0 file =

{{{
import java.io.File;
import java.io.IOException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.phloc.commons.io.file.SimpleFileIO;
import com.phloc.commons.state.ESuccess;
import com.phloc.css.ECSSVersion;
import com.phloc.css.decl.CascadingStyleSheet;
import com.phloc.css.writer.CSSWriter;
import com.phloc.css.writer.CSSWriterSettings;

/**
 * This is example code to write a CSS declaration to a {@link File}.
 * 
 * @author philip
 */
public final class WikiWriteCSS
{
  private static final Logger s_aLogger = LoggerFactory.getLogger (WikiWriteCSS.class);

  /**
   * Write a CSS 3.0 declaration to a file using UTF-8 encoding.
   * 
   * @param aCSS
   *        The CSS to be written to a file
   * @param aFile
   *        The file to be written. May not be <code>null</code>.
   * @return {@link ESuccess#SUCCESS} if everything went okay, and
   *         {@link ESuccess#FAILURE} if an error occurred
   */
  public ESuccess writeCSS30 (final CascadingStyleSheet aCSS, final File aFile)
  {
    // 1.param: version to write
    // 2.param: false== non-optimized output
    final CSSWriterSettings aSettings = new CSSWriterSettings (ECSSVersion.CSS30, false);
    try
    {
      final CSSWriter aWriter = new CSSWriter (aSettings);
      // Write the @charset rule: (optional)
      aWriter.setContentCharset ("utf-8");
      // Write a nice file header
      aWriter.setHeaderText ("This file was generated by phloc-css\nGrab a copy at http://code.google.com/p/phloc-css");
      // Convert the CSS to a String
      final String sCSSCode = aWriter.getCSSAsString (aCSS);
      // Finally write the String to a file
      return SimpleFileIO.writeFile (aFile, sCSSCode, "utf-8");
    }
    catch (final IOException ex)
    {
      s_aLogger.error ("Failed to write the CSS to a file", ex);
      return ESuccess.FAILURE;
    }
  }
}
}}}

= Creating a @font-face rule from scratch =
The following code creates a CSS @font-face rule that looks like this:
{{{
@font-face {
   font-family: "Your typeface";
   src: url("path/basename.eot");
   src: local("local font name"),
        url("path/basename.woff") format("woff"),
        url("path/basename.otf") format("opentype"),
        url("path/basename.svg#filename") format("svg");
 }
}}}

{{{
import java.io.IOException;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import com.phloc.commons.annotations.Nonempty;
import com.phloc.commons.string.StringHelper;
import com.phloc.css.decl.CSSDeclaration;
import com.phloc.css.decl.CSSExpression;
import com.phloc.css.decl.CSSExpressionMemberFunction;
import com.phloc.css.decl.CSSFontFaceRule;
import com.phloc.css.decl.CascadingStyleSheet;
import com.phloc.css.decl.ECSSExpressionOperator;

/**
 * This is example code to create a font-face rule from scratch
 * 
 * @author Philip Helger
 */
public final class WikiCreateFontFaceRule
{
  @Nonnull
  private static CSSExpressionMemberFunction _createFormatFct (@Nonnull @Nonempty final String sFormatName)
  {
    return new CSSExpressionMemberFunction ("format", CSSExpression.createString (sFormatName));
  }

  /**
   * Create a single font-face rule.
   * 
   * @param sTypefaceName
   *        The name of the font-face in CSS. May neither be <code>null</code>
   *        nor empty.
   * @param sLocalName
   *        The name of the local font to be used. May be <code>null</code>.
   * @param sPath
   *        The server-relative path, where the font files reside. May not be
   *        <code>null</code>.
   * @param sBasename
   *        the base name of the font-files (without extension). May neither be
   *        <code>null</code> nor empty
   */
  @Nonnull
  public static CascadingStyleSheet createFontFace (@Nonnull @Nonempty final String sTypefaceName,
                                                    @Nullable final String sLocalName,
                                                    @Nonnull final String sPath,
                                                    @Nonnull final String sBasename) throws IOException
  {
    final CascadingStyleSheet aCSS = new CascadingStyleSheet ();
    final CSSFontFaceRule aFFR = new CSSFontFaceRule ();

    // The font-family
    aFFR.addDeclaration (new CSSDeclaration ("font-family", CSSExpression.createString (sTypefaceName), false));

    // The special EOT file
    aFFR.addDeclaration (new CSSDeclaration ("src", CSSExpression.createURI (sPath + sBasename + ".eot"), false));

    // The generic rules
    final CSSExpression aExpr = new CSSExpression ();
    if (StringHelper.hasText (sLocalName))
      aExpr.addMember (new CSSExpressionMemberFunction ("local", CSSExpression.createString (sLocalName)))
           .addMember (ECSSExpressionOperator.COMMA);
    aExpr.addURI (sPath + sBasename + ".woff")
         .addMember (_createFormatFct ("woff"))
         .addMember (ECSSExpressionOperator.COMMA)
         .addURI (sPath + sBasename + ".otf")
         .addMember (_createFormatFct ("opentype"))
         .addMember (ECSSExpressionOperator.COMMA)
         .addURI (sPath + sBasename + ".svg#" + sBasename)
         .addMember (_createFormatFct ("svg"));
    aFFR.addDeclaration (new CSSDeclaration ("src", aExpr, false));

    // Add the font-face rule to the main CSS
    aCSS.addRule (aFFR);
    return aCSS;
  }
}
}}}

=Read the CSS content of a HTML style attribute=
The following examples reads the CSS content of "sStyle" as CSS 3.0 and creates a CSSDeclarationList from it:
{{{
import com.phloc.css.ECSSVersion;
import com.phloc.css.decl.CSSDeclarationList;
import com.phloc.css.reader.CSSReaderDeclarationList;

/**
 * Example how to read the content of a CSS style attribute.
 * 
 * @author Philip Helger
 */
public final class WikiReadFromHtml
{
  public static CSSDeclarationList readFromStyleAttribute ()
  {
    final String sStyle = "color:red; background:fixed !important";
    final CSSDeclarationList aDeclList = CSSReaderDeclarationList.readFromString (sStyle, ECSSVersion.CSS30);
    if (aDeclList == null)
      throw new IllegalStateException ("Failed to parse CSS: " + sStyle);
    return aDeclList;
  }
}
}}}

=Visiting all declarations contained in an HTML style attribute=
Similar to the above example, but visiting all declarations and printing them on stdout. Two different approaches are shown: first all declarations are retrieved via the native API, and second a custom visitor is used to determine all declarations.
The result of this method looks like this:
{{{
color: red (not important)
background: fixed (important)
}}}
The example code:
{{{
import javax.annotation.Nonnull;

import com.phloc.css.ECSSVersion;
import com.phloc.css.decl.CSSDeclaration;
import com.phloc.css.decl.CSSDeclarationList;
import com.phloc.css.decl.visit.CSSVisitor;
import com.phloc.css.decl.visit.DefaultCSSVisitor;
import com.phloc.css.decl.visit.ICSSVisitor;
import com.phloc.css.reader.CSSReaderDeclarationList;
import com.phloc.css.writer.CSSWriterSettings;

/**
 * Example how to read the content of a CSS style attribute, and visit all
 * contained declarations - with the API and with a visitor.
 * 
 * @author Philip Helger
 */
public final class WikiVisitFromHtml
{
  public static void readFromStyleAttributeWithAPI ()
  {
    final String sStyle = "color:red; background:fixed !important";
    final CSSDeclarationList aDeclList = CSSReaderDeclarationList.readFromString (sStyle, ECSSVersion.CSS30);
    if (aDeclList == null)
      throw new IllegalStateException ("Failed to parse CSS: " + sStyle);
    // For all contained declarations
    for (final CSSDeclaration aDeclaration : aDeclList.getAllDeclarations ())
      System.out.println (aDeclaration.getProperty () +
                          ": " +
                          aDeclaration.getExpression ().getAsCSSString (new CSSWriterSettings (ECSSVersion.CSS30), 0) +
                          (aDeclaration.isImportant () ? " (important)" : " (not important)"));
  }

  public static void readFromStyleAttributeWithVisitor ()
  {
    final String sStyle = "color:red; background:fixed !important";
    final CSSDeclarationList aDeclList = CSSReaderDeclarationList.readFromString (sStyle, ECSSVersion.CSS30);
    if (aDeclList == null)
      throw new IllegalStateException ("Failed to parse CSS: " + sStyle);
    // Create a custom visitor
    final ICSSVisitor aVisitor = new DefaultCSSVisitor ()
    {
      @Override
      public void onDeclaration (@Nonnull final CSSDeclaration aDeclaration)
      {
        System.out.println (aDeclaration.getProperty () +
                            ": " +
                            aDeclaration.getExpression ().getAsCSSString (new CSSWriterSettings (ECSSVersion.CSS30), 0) +
                            (aDeclaration.isImportant () ? " (important)" : " (not important)"));
      }
    };
    CSSVisitor.visitAllDeclarations (aDeclList, aVisitor);
  }
}
}}}