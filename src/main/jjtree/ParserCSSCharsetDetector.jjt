/**
 * Copyright (C) 2006-2012 phloc systems
 * http://www.phloc.com
 * office[at]phloc[dot]com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

options {
  // JavaCC options
  // LOOKAHEAD = 2;
  CHOICE_AMBIGUITY_CHECK = 5;
  STATIC = false;  // to allow for multiple parser instances
  // DEBUG_PARSER = true;
  // DEBUG_LOOKAHEAD = true;
  // DEBUG_TOKEN_MANAGER = true;
  // ERROR_REPORTING = false;
  JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT = true;
  IGNORE_CASE = true;
  // USER_TOKEN_MANAGER = true;
  // SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
  // USER_CHAR_STREAM = true;
  FORCE_LA_CHECK = true;

// JJTree options
  // BUILD_NODE_FILES = false;
  // NODE_DEFAULT_VOID = true;
  NODE_CLASS = "com.phloc.css.parser.CSSNode";
  NODE_PREFIX = "";
  // NODE_USES_PARSER = true;
}

PARSER_BEGIN(ParserCSSCharsetDetector)
package com.phloc.css.parser;

public class ParserCSSCharsetDetector
{
}
PARSER_END(ParserCSSCharsetDetector)

TOKEN_MGR_DECLS :
{}

<DEFAULT> TOKEN :
{
  < S: ( " "|"\t"|"\r"|"\n"|"\f" )+ >
}

<DEFAULT> MORE :
{
  < "/*" > : IN_COMMENT
}

<IN_COMMENT> MORE :
{
  < ~[] > : IN_COMMENT
}

<IN_COMMENT> SKIP :
{
  < "*/" > : DEFAULT
}

<DEFAULT> TOKEN :
{
  < #H: ["0"-"9","a"-"f"] >
| < #HNUM: <H> | <H><H> | <H><H><H> | <H><H><H><H> | <H><H><H><H><H> | <H><H><H><H><H><H> >
| < #UNICODE: "\\" <HNUM> ( "\r\n" | [" ","\t","\r","\n","\f"] )? >
| < #ESCAPE: <UNICODE> | ( "\\" ~["\r","\n","\f","0"-"9","a"-"f"] ) >
| < NL: "\n" | "\r\n" | "\r" | "\f" >
| < STRING1: "\"" ( ~["\n","\r","\f","\\","\""] | "\\" <NL> | <ESCAPE> )* "\"" >
| < STRING2: "'"  ( ~["\n","\r","\f","\\","'"]  | "\\" <NL> | <ESCAPE> )* "'" >
| < #COMMENT: "/" "*" ( ~["*"] )* ("*")+ ( ~["/","*"] ( ~["*"] )* ( "*" )+ )* "/">
| < REST: ~[] >
}

CSSNode styleSheetCharset() #Root : 
{ Token t; }
{
  try
  {
    ( <S> )?
    "@charset"
    <S>
    ( t = <STRING1> { jjtThis.setText (t.image); }
    | t = <STRING2> { jjtThis.setText (t.image); }
    )
    ";"
    { return jjtThis; }
  } catch (ParseException e) {
    /* ignore */
  }
  { return jjtThis; }
}
